package com.binesy.localisation.creator;

import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;

import com.binesy.localisation.StringResource;

public class AndroidResourceCreator extends ResourceCreator {

	public AndroidResourceCreator(ArrayList<StringResource> resources, File outputFile, String replacePattern) {
		super(resources, outputFile, replacePattern);
	}

	@Override
	protected String getGeneratedFilePath(String locale) {
		String localeName = locale.toLowerCase(Locale.getDefault()).replace(' ', '_').replace('\\', '-');
		return "android\\res\\values-" + localeName + "\\generated-strings.xml";
	}

	@Override
	protected String createResourceString(ArrayList<StringResource> resource, String locale) {
		StringBuilder sb = new StringBuilder();
		sb.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
		sb.append("\n\n");
		sb.append(getAutoGeneratedText());
		sb.append("\n");
		sb.append("<resources>");
		sb.append("\n\t");

		Set<String> keysAdded = new HashSet<String>();

		for (int i = 0; i < resource.size(); i++) {
			StringResource res = resource.get(i);

			if (res != null) {
				String key = sanitiseKeyString(res.getKey());

				if (!key.equals("") && !keysAdded.contains(key)) {
					sb.append("\n\t");
					String originalString = res.getLocaleString(locale);
					String replacedString = regexReplaceInString(originalString);

					boolean stringUpdated = !originalString.equals(replacedString);
					String formattdProperty = "";

					// If a regex took place, make sure the property
					// "formatted=false" is added so it can handle unordered
					// string replacements.
					if (stringUpdated) {
						formattdProperty = " formatted=\"false\"";
					}

					String escapedData = escapeData(replacedString);
					String value = String.format(getStringItemTemplate(), res.getDescription(), key, formattdProperty,
							escapedData);
					sb.append(value);

					keysAdded.add(key);
				}
			}
		}

		sb.append("\n");
		sb.append("</resources>");
		return sb.toString();
	}

	@Override
	protected String sanitiseKeyString(String key) {
		key = key.toLowerCase(Locale.getDefault());
		// This is crap and should be changed with something actually scalable and decent :(
		key = key.replace(".", "___");
		key = key.replace(' ', '_');
		key = key.replace("-", "__");
		key = key.replace("\"", "");
		key = key.replace("[", "_");
		key = key.replace("]", "_");
		return key.trim();
	}

	@Override
	protected String getStringItemTemplate() {
		return "<!-- %1$s -->\n\t<string name=\"%2$s\"%3$s>%4$s</string>\n";
	}

	@Override
	protected String getAutoGeneratedText() {
		return "<!-- This file has been generated automatically. Do NOT manually edit. -->\n";
	}

	@Override
	protected String getRegexReplaceString() {
		return "%s";
	}
}
